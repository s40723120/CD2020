var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'Develop.html'}, {'title': '每周進度', 'text': '', 'tags': '', 'url': '每周進度.html'}, {'title': 'Week1', 'text': '建立倉儲git clone後 \n 在小黑窗輸入git submodule add\xa0 https://github.com/mdecourse/cmsimde \n', 'tags': '', 'url': 'Week1.html'}, {'title': 'Week2', 'text': 'Python升級到3.8.2 \n 到 https://www.python.org/downloads/release/python-382/ 下載安裝檔 \n 把pip取消勾選 \n \n 安裝完後使用python wsgi.py將無法近端啟用 \n 此時使用下列指令 \n pip install\xa0 Flask \n pip install\xa0 Markdown \n pip install\xa0 lxml \n pip install\xa0 bs4 \n pip install\xa0 flask_cors \n pip install\xa0 pelican \n pip install\xa0 leo \n 這些python3.8.2缺少的模組給安裝下來 \n', 'tags': '', 'url': 'Week2.html'}, {'title': 'Week3', 'text': '閱讀電子書 https://www.coppeliarobotics.com/helpFiles/index.html \n 從中了解關於Coppeliasim的功能 \n Coppeliasim有非常完善的物理仿真 引擎、支持多種類型機器人。還有許多額外的物件可以導入包 含完整的運動學計算器，路徑規劃，嵌入式圖像處理的視覺傳感器。 可以通過Solidwork，AutoCAD之類的三維繪圖軟件符合需求的模型，再轉換成stl文件導入即可。 \n Coppeliasim支持的程式語言有C++、Python、Java、Lua、Matlab、Octave。 \n', 'tags': '', 'url': 'Week3.html'}, {'title': 'Week4', 'text': '', 'tags': '', 'url': 'Week4.html'}, {'title': 'Week5', 'text': '', 'tags': '', 'url': 'Week5.html'}, {'title': 'Week6', 'text': '', 'tags': '', 'url': 'Week6.html'}, {'title': 'Week7', 'text': '', 'tags': '', 'url': 'Week7.html'}, {'title': 'Week8', 'text': '\n', 'tags': '', 'url': 'Week8.html'}, {'title': 'Coppeliasim', 'text': 'CoppeliaSim 高度可定制的模擬器，可以自定義模擬的每個方面。此外對於機器人學習者可以大大降低學習成本。 \n 機器人設計工具可以透過v-rep裡的模擬平台，加入相關引擎、物理碰撞等旋轉功能。 \n v-rep是一款靈活、可拓展的通用機器人模擬器，支持六種不同的編程或編碼方法，每種方法都具有相對於其他方法的特殊優點（顯然還有缺點），但所有六種方法都是相互兼容的（即可以同時使用，甚至可以協同使用）。 \n 這可以通過精心設計的應用程序編程接口（API）來實現。 \n', 'tags': '', 'url': 'Coppeliasim.html'}, {'title': 'Entities', 'text': 'Entities 實體 An entity is a term that refers to a scene object or a collection. 實體是指 場景物件 或 集合體 的專業術語 \n', 'tags': '', 'url': 'Entities.html'}, {'title': 'Scene objects', 'text': 'Scene objects \xa0 場景物件 The main elements in CoppeliaSim that are used for building a simulation scene are scene objects (objects in short). CoppeliaSim中用於構建模擬場景的主要元素是場景物件（簡而言之） Objects are visible in the scene hierarchy and in the scene view. 物件在場景層次結構和場景視圖中可見。 In the scene view, objects have a three dimensional representation as illustrated in following figure: 在物件視圖中，物件具有三維表示，如下圖所示： Following list gives a brief functional description of each object type: 以下列表簡要介紹了每種物件類型的功能： \n ● Shapes : a shape is a rigid mesh that is composed of triangular faces. 形狀：形狀是由三角形面組成的剛性網格。 ● Joints : a joint object is a joint or actuator. Four types are supported: revolute joints, prismatic joints, screws and spherical joints. 關節：關節物件是關節或執行器。四種類型支持架：旋轉接頭，棱柱接頭，螺釘和球形接頭。 ● Graphs : a graph is used to record and visualize simulation data. 圖形：圖形用於記錄和可視化模擬數據。 ● Dummies : a dummy is a point with orientation. Dummies are multipurpose objects that can have many different applications. 假人：假人是具有定向的點。假人是可以具有許多不同應用程序的多用途對象。 ● Proximity sensor s : a proximity sensor detects objects in a geometrically exact fashion within its detection volume. CoppeliaSim supports pyramid-, cylinder-, disk-, cone- and ray-type proximity sensors. 接近傳感器：接近傳感器以幾何精確的方式在其檢測範圍內檢測物體。 CoppeliaSim支持金字塔型，圓柱型，圓盤型，圓錐型和射線型接近傳感器。 ● Vision sensors : a vision sensor is a camera-type sensor, reacting to light, colors and images. 視覺傳感器：視覺傳感器是一種相機型傳感器，對光線，顏色和圖像有反應。 ● Force sensors : a force sensor is an object able to measure forces and torques that are applied to it. It also has the ability to break if a given threashold is overshot. 力傳感器：力傳感器是能夠測量施加到其上的力和扭矩的對象。 如果給定的閾值被超出，它也具有打破的能力。 ● Cameras : a camera is an object that allows seeing the simulation scene from various view points. 攝影機：攝影機是一個可以從各個角度查看模擬場景的對象。 ● Lights : a light is an object that allows illuminating the simulation scene. 燈光：燈光是一個可以照亮模擬場景的對象。 ● Paths : a path is an object that defines a path or trajectory in space. It can be used for various purposes, also as a customized joint or actuator. 路徑：路徑是在空間中定義路徑或軌蹟的對象。 它可以用於各種目的，也可以用作定制的接頭或執行器。 ● OC trees : an OC tree is a spacial partitioning data structure made up by voxels. OC樹：OC樹是由體素組成的空間分區數據結構。 ● Point clouds : a point cloud is an OC tree structure that contains points. 點雲：點雲是包含點的OC樹結構。 Some of above objects can have special properties allowing other objects or calculation modules to interact with them. Objects can be: 以上某些物件可以具有特殊的屬性，從而允許其他物件或計算模塊與它們進行交互。物件可以是： ● Collidable \xa0 \xa0 \xa0 \xa0可碰撞 ● Measurable \xa0 \xa0 可衡量的 ● Detectable \xa0 \xa0 \xa0可檢測的 ● Renderable \xa0 \xa0 可呈現 ● Viewable \xa0 \xa0 \xa0 \xa0 可見的 \n', 'tags': '', 'url': 'Scene objects.html'}, {'title': 'Collections', 'text': 'Collections \xa0 集合 A collection is a user-defined collection of scene objects. 集合是場景物件的用戶定義集合。 A collection has to contain at least one object and is considered to be an entity (objects are also entities) 集合必須包含至少一個物件，並且被認為是一個實體（物件也是實體）。 Collections are useful when referring to several objects like a robot for instance 當引用多個物件（例如機器人）時，集合很有用 CoppeliaSim supports calculations based not only on objects, but also on collections CoppeliaSim支持不僅基於物件而且還基於集合的計算 For instance the collision detection module allows registering following collision pair(collection A; object B 例如，碰撞檢測模塊允許註冊以下碰撞(集合A；物件B) The collision checking algorithm will then check whether the collection A (any object composing it) collides with object B. 然後，碰撞檢查算法將檢查集合A（組成它的任何對象）是否與物件B碰撞。 Collections are collidable, measurable, detectable and renderable entities. 集合是可碰撞，可測量，可檢測和可渲染的實體。 \n', 'tags': '', 'url': 'Collections.html'}, {'title': 'Calculation modules', 'text': 'CoppeliaSim offers powerful calculation functionalities or calculation modules CoppeliaSim提供強大的計算功能或計算模塊 that are not directly encapsulated in objects(like proximity sensors or vision sensors for instance) 沒有直接封裝在物件中(例如接近傳感器或視覺傳感器) but that rather operate on one or several objects. 而是對一個或幾個物件進行操作。 Calculation modules include: 計算模塊包括： ● the collision detection module 碰撞檢測模塊 ● the minimum distance calculation module 最小距離計算模塊 ● the inverse kinematics calculation module 逆運動學計算模塊 ● the dynamics module 動力學模塊 Other, similar functionality, might be offered via a plugin, as was done with the path/motion planning plugin for instance. 其他類似功能也可以通過插件提供，例如使用路徑/運動計劃插件。 Some calculation module allow registering calculation objects that are user defined. Calculation objects are different from scene objects, but are indirectly linked to them by operating on them. This means that calculation objects cannot exist by themselves: 一些計算模塊允許註冊用戶定義的計算物件。計算物件不同於場景物件，但是通過對其進行操作而間接鏈接到它們。 這意味著計算物件本身不能存在： Collision detection objects (or collision objects) rely on collidable objects. Minimum distance calculation objects (or distance objects) rely on measurable objects. Inverse kinematics calculation objects (or IK groups) rely mainly on dummies and kinematic chains, where joint objects play a central role. 碰撞檢測對象（或碰撞對象）依賴於可碰撞對象。 最小距離計算對象（或距離對象）依賴於可測量的對象。 逆運動學計算對象（或IK組）主要依賴於虛擬對象和運動鏈，其中關節對象起著核心作用。 \n', 'tags': '', 'url': 'Calculation modules.html'}, {'title': 'Writing code', 'text': 'CoppeliaSim is a highly customizable simulator: every aspect of a simulation can be customized CoppeliaSim是高度可定制的模擬器：可以自定義模擬的每個方面。 Moreover, the simulator itself can be customized and tailored so as to behave exactly as desired. 此外，模擬器本身可以進行定制和定制，以使其性能完全符合要求。 This is allowed through an elaborate Application Programming Interface (API). 這可以通過精心設計的應用程序編程接口（API）來實現。 Six different programming or coding approaches are supported, 支持六種不同的編程或編碼方法， each having particular advantages (and obviously also disadvantages) over the others 每個都比其他的具有特殊的優勢（顯然也有劣勢） but all six are mutually compatible (i.e. can be used at the same time, or even hand-in-hand) 但所有六種方法都是相互兼容的（即可以同時使用，甚至可以穿插使用）。 The control entity of a model, scene, or the simulator itself can be located inside: 模型，場景或模擬器本身的控制實體可以位於以下位置： \n ● embedded scrip t \xa0 \xa0 \xa0嵌入式腳本 ● an add-on\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0\xa0 附加組件 ● a plugin \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0\xa0 插件 ● remote API client \xa0 \xa0\xa0 遠程API客戶端 ● ROS node ● BlueZero node \n', 'tags': '', 'url': 'Writing code.html'}, {'title': 'Webots', 'text': 'webots相關資料 https://cyberbotics.com/doc/guide/development-environments \n webot載點 \n 可攜版本 \n 電腦版本 \n \n', 'tags': '', 'url': 'Webots.html'}, {'title': '開會紀錄', 'text': '', 'tags': '', 'url': '開會紀錄.html'}, {'title': 'W3', 'text': '\n', 'tags': '', 'url': 'W3.html'}, {'title': 'W4', 'text': '\n', 'tags': '', 'url': 'W4.html'}]};